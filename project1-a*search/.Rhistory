log(2.718281828)
# Logical
logical <- TRUE
a<- 30<45
a<- 30 >45
a<- 30 >45 | 30<45
a<- 30 >45 & 30<45
typeof(a)
# Numeric
integer <- 22L
typeof(integer)
double <- 22
typeof(double)
object.size(integer)
object.size(double)
# Strings
string <- "R"
typeof(string)
## Missing values
missings <- NA
typeof(missings)
# almost every function with a missing argument returns a missing value
# (different types of missing values)
missings+1
'du' + 'pa'
typeof(logical*logical)
logical*logical
typeof(logical + double)
logical + double
typeof(string + double)
# Function c = concatenate , result is a character vector
c(string,double)
typeof(c(string,double))
# Function c = concatenate , result is a character vector
c(string,double)
logicalDouble <- c(logical,double)
logicalString <- c(logical,string)
StringDouble  <- c(string,double)
attributes(StringDouble)
attr(StringDouble, "Y") <-1:6
structure(StringDouble)
table(f1)
f1<- factor(c("a","a","b","c") , levels= c("a", "b", "c", "d"))
table(f1)
f2 <-ordered(c("a","a","b","c") , levels= c("a", "b", "c", "d"))
table(f2)
f3 <-ordered(c("a","a","b","c") , levels= c("d","a", "c", "b" ))
table(f3)
rm(list=ls())               # clean what we did
#Defining vectors based on simple rules
aa <- 1:5
bb <- rep(1, 20)                # repeat vector n times
rep(1:4, each = 2)
rep(1:4, times = 2)
seq(1,10)                       # sequences from .. till ...
seq(1, 10, length=20)
seq(1, 10, by=0.125)
ob1 <- rep(seq(1,10,by=0.04), 2) # replicate the sequence twice and save it as ob1
ob2 <- rep(seq(1,10,by=0.04), 2)
ob3 <- rep(seq(1,10,by=0.04), 2)
sum(bb)              # sums all elements of vector bb
summary(bb)          # basic descriptive statistics of bb
table(bb)            # Table of frequencies
# mathematical operations on vectors
2*ob1
ob1[1:5] + ob2[1:5]
ob1[1:5] + ob2[2:6]
ob3 <- c("cat", "dog", "chicken")
2*ob3               #Mathematical operations not allowed with strings
ob4 <- c(ob1, ob3) # ob4 also changes to a character vector
2*ob4
2*ob4
# Matrices & Arrays (vectors with additional structure)
m1<-matrix(c(ob1,ob2), ncol=2)
structure(m1)
attributes(m1)
dim(m1)                                  # matrix dimension
colnames(m1) <- c("COL1","COL2")        # here, we change all column names
colnames(m1)[2] <- c("Column2")       # here, we indicate that we want to change only the name of the 2nd column
View(m1)
rownames(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
rownames(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
rownames(m1)[3] <- c("r4")
rownames(m1)[1:9] <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
help(rownames)
m0 <- matrix(NA,4,0)
rownames(m0)
m2 <- cbind(1, 1:4)
colnames(m2, do.NULL = FALSE)
rownames(m2, do.NULL = FALSE)
rownames(m1)
rownames(m1, do.NULL=FALSE)
rownames(m1, do.NULL = TRUE) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
rownames(m1, do.NULL = FALSE) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
rownames(m1, do.NULL=FALSE, prefix = NULL)
rownames(m1, do.NULL=FALSE, prefix = NULL) <- 'dupa'
rownames(m1) <- 'dupa'
View(m1)
View(m2)
View(m1)
View(m0)
View(m1)
rownames(m1)
rownames(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
row.names(m1)
row.names(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
typeof(m1)
View(m1)
m1 <-matrix(nrow = length(m1))
typeof(m1)
rownames(m1)
rownames(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
rownames(m1) <- 5
dimnames(m1)
help(dimnames)
dimnames(m1) <- 5
rownames(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
# Matrices & Arrays (vectors with additional structure)
m1<-matrix(c(ob1,ob2), ncol=2)
structure(m1)
attributes(m1)
dim(m1)                                  # matrix dimension
rownames(m1) <- c("r1", "r2", "r3", "Row4", "r5" , "r6","r7","r8","r9")
colnames(m1) <- c("COL1","COL2")        # here, we change all column names
colnames(m1)[2] <- c("Column2")       # here, we indicate that we want to change only the name of the 2nd column
View(m1)
help(matrix)
rownames(m1)[3] <- c("r4")
# Matrices & Arrays (vectors with additional structure)
m1<-matrix(c(ob1,ob2), ncol=2, dimnames=2)
# Matrices & Arrays (vectors with additional structure)
m1<-matrix(c(ob1,ob2), ncol=2)
all_vectors <- list(a2,aa,bb,el1, ob1, ob2,ob3,ob4)
a1 <-array(c(ob1,ob2) , dim=c(2,9))
a2 <-array(c(ob1,ob2) , dim=c(2,3,3))         # a cube
View(a1)
a2 <-array(c(ob1,ob2) , dim=c(2,3,3))         # a cube
attributes(a2)
all_vectors <- list(a2,aa,bb,el1, ob1, ob2,ob3,ob4)
all_vectors <- list(a2,aa,bb, ob1, ob2,ob3,ob4)
rm(list=ls()) # how to remove all objects from the memory
x1 <- letters[1:5]
y1 <- rnorm(5)
z1 <- runif(5) > 0.5
dataframe1 <- data.frame(x1,y1,z1)
is.matrix(dataframe1)
is.data.frame(dataframe1)
class(dataframe1)
attributes(dataframe1)
str(dataframe1) # technical information
summary(dataframe1) # statistical information
install.packages("tibble")                    # A modern alternative
library(tibble)
tb1 <-tibble(x1,y1,z1)
str(tb1)
# By position
x1[c(1,3)]
x1[-3]
# Logical conditions
x1[x1>"c"]
z1[!is.na(x1)]
help(is.na)
# With lists
mylist <- list(x1,y1,z1)
str(mylist[1])        # Subset is also a list
str(mylist[[1]])
# With databases
df[c(1,2)]            # Default: columns - like a list
df[c(1,2) , ]         # First two rows (like a matrix)
# Other methods
x<- df[["x1"]]
x <-df$x1
rm(list=ls())
help(seq)
v <- seq(0, by=0.3, length=15)
v
lentgh(v)
lentgth(v)
lentth(v)
length(v)
vec1=c(a, FALSE, 3, 7)
vec1=c('a', FALSE, 3, 7)
typeof(vec1)
a <- seq(0, by=0.3, length=15)
v <- rnorm(1000)
summary(v)
plot(v)
histogram(v)
hist(v)
m1 = matrix(c(c(1,2,3,4),c(5,6,7,8)), nrows = 2, ncol = 4)
m1 = matrix(nrows = 2, ncol = 4)
m1 = matrix(nrow = 2, ncol = 4)
m1 = matrix(c(c(1,2,3,4),c(5,6,7,8)), nrow = 2, ncol = 4)
m1
m1 = matrix(1:8, nrow = 2, ncol = 4)
m1
m1 = matrix(1:8, nrow = 2, ncol = 4, byrow = TRUE)
m1
help(matrix)
# (a) Consider the vectors
x1 <- rchisq(200, df=6)
x2 <- rt(200, df=4)
x3 <- head(x1,20),
tail(x2,20)
x3 <- head(x1,20)
x3
tail(x2,20)
x3 <- c(head(x1,20), tail(x2,20))
x3
length(x3)
tail(x2,20)
cars <-data.frame(mtcars)
mtcars[mtcars$cyl = 4 , ]
mtcars[mtcars$cyl == 4 , ]
View(cars)
mtcars[-1:4, ]
mtcars[-(1:4), ]
mtcars[mtcars$cyl <=5, ]
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6 , ]
mtcars[mtcars$cyl == 4 , 1]
mtcars[mtcars$cyl == 4 , 2]
mtcars[mtcars$cyl == 4 , 2]
mtcars[mtcars$cyl == 4 , 1:3]
# (d) What does the following code do? How does it work? (try to describe it at length)
# (Create a vector x with missing values if needed)
x[is.na(x)] <- 0
# How does it work?
# is.na(x) shows what is the NA.
x<-c(1,2,3,NA)
is.na(x)
# So, x[is.na(x)] means the object that is NA
x[is.na(x)]
# x[is.na(x)]<-0 means if it is NA, put 0 (replace NA to 0)
x[is.na(x)] <- 0
x
# (d) What does the following code do? How does it work? (try to describe it at length)
# (Create a vector x with missing values if needed)
x <- c(1,2,3,NA)
# (e) Below we create a list. Try to recover the following elements
food    <- c("bigos" , "pierogi" , "soup")
animals <- c("cat" , "dog" , "bird")
plants  <- c("oak" , "pine" , "willow")
my_list <- list(food, animals, plants)
ans <- c(my_list[[1]][1], my_list[[2]][1], my_list[[2]][3], my_list[[3]][2])
ans
# wykres wartosci teoretycznych sprzedaży Bass_pdf
Param <- coef(ModelBassa)
m <- Param[1]
p <- Param[2]
q <- Param[3]
#definiujemy skladnik ep, zaby latwiej zapisac wzor
ep <- exp(-(p+q) * deltaT)
Bass_pdf <- m * ( (p+q)^2 / p ) * ep / (1 + (q/p) * ep )^2
plot(deltaT,Bass_pdf , xlab = "Lata",ylab = "Roczna sprzedaż", type='l')
points(T, Sprzedaz)
# wykres skumulowanej sprzedaży Bass_cdf
Bass_cdf <- m * (1 - ep)/(1 + (q/p)*ep)
plot(deltaT, Bass_cdf, xlab = "Lata",ylab = "Sprzedaż skumulowana", type='l')
points(T, Sprzedaz_skum)
Wyjaśnienia - dlaczego  wprowadzamy  deltaT?
T przyjmuje wartości od 1 do 10, gdyż mamy 10 obserwacji.
#Model Bassa---------------------------------------------------------------------------
#mamy 10 obserwacji (roczna sprzedaz produktu), na podstawie których chcemy oszacować model Bassa
T <- 1:10
Sprzedaz<- c(840, 1470, 2110, 4000, 7590, 10950, 10530, 9470, 7790, 5890)
plot(Sprzedaz)
Sprzedaz_skum <- cumsum(Sprzedaz)
plot(Sprzedaz_skum)
ModelBassa <- nls(Sprzedaz ~ M * ( ((P+Q)^2 / P) * exp(-(P+Q) * T) ) /(1+(Q/P)*exp(-(P+Q)*T))^2,
start = list(M=60000, P=0.05, Q=0.4))
summary(ModelBassa)
# wykres wartosci teoretycznych sprzedaży Bass_pdf
Param <- coef(ModelBassa)
m <- Param[1]
p <- Param[2]
q <- Param[3]
#definiujemy skladnik ep, zaby latwiej zapisac wzor
ep <- exp(-(p+q) * T)
Bass_pdf <- m * ( (p+q)^2 / p ) * ep / (1 + (q/p) * ep )^2
plot(T,Bass_pdf , xlab = "Lata",ylab = "Roczna sprzedaż", type='l')
points(T, Sprzedaz)
# wykres skumulowanej sprzedaży Bass_cdf
Bass_cdf <- m * (1 - ep)/(1 + (q/p)*ep)
plot(T, Bass_cdf, xlab = "Lata",ylab = "Sprzedaż skumulowana", type='l')
points(T, Sprzedaz_skum)
#Model Bassa - bardziej gadki wykres-----------------------------------------------------
#mamy 10 obserwacji (roczna sprzedaz produktu), na podstawie których chcemy oszacować model Bassa
T <- 1:10
#wprowadzamy deltaT
deltaT <- (1:100)/10
deltaT
Sprzedaz<- c(830,1360,2115,4090, 7880, 10840, 10620, 9360, 7680, 5780)
plot(Sprzedaz)
Sprzedaz_skum <- cumsum(Sprzedaz)
plot(Sprzedaz_skum)
ModelBassa <- nls(Sprzedaz ~ M * ( ((P+Q)^2 / P) * exp(-(P+Q) * deltaT) ) /(1+(Q/P)*exp(-(P+Q)*deltaT))^2,
start = list(M=60630, P=0.03, Q=0.38))
summary(ModelBassa)
# wykres wartosci teoretycznych sprzedaży Bass_pdf
Param <- coef(ModelBassa)
m <- Param[1]
p <- Param[2]
q <- Param[3]
#definiujemy skladnik ep, zaby latwiej zapisac wzor
ep <- exp(-(p+q) * deltaT)
Bass_pdf <- m * ( (p+q)^2 / p ) * ep / (1 + (q/p) * ep )^2
plot(deltaT,Bass_pdf , xlab = "Lata",ylab = "Roczna sprzedaż", type='l')
points(T, Sprzedaz)
# wykres skumulowanej sprzedaży Bass_cdf
Bass_cdf <- m * (1 - ep)/(1 + (q/p)*ep)
plot(deltaT, Bass_cdf, xlab = "Lata",ylab = "Sprzedaż skumulowana", type='l')
points(T, Sprzedaz_skum)
#wprowadzamy deltaT
deltaT <- (1:100)/10
deltaT
Sprzedaz<- c(830,1360,2115,4090, 7880, 10840, 10620, 9360, 7680, 5780)
plot(Sprzedaz)
Sprzedaz_skum <- cumsum(Sprzedaz)
plot(Sprzedaz_skum)
ModelBassa <- nls(Sprzedaz ~ M * ( ((P+Q)^2 / P) * exp(-(P+Q) * deltaT) ) /(1+(Q/P)*exp(-(P+Q)*deltaT))^2,
start = list(M=60630, P=0.03, Q=0.38))
summary(ModelBassa)
# wykres wartosci teoretycznych sprzedaży Bass_pdf
Param <- coef(ModelBassa)
m <- Param[1]
p <- Param[2]
q <- Param[3]
#definiujemy skladnik ep, zaby latwiej zapisac wzor
ep <- exp(-(p+q) * deltaT)
Bass_pdf <- m * ( (p+q)^2 / p ) * ep / (1 + (q/p) * ep )^2
plot(deltaT,Bass_pdf , xlab = "Lata",ylab = "Roczna sprzedaż", type='l')
points(T, Sprzedaz)
# cleaning the environment
rm(list=ls())
# libraries
install.packages(ggplot2)
install.packages(ggprism)
library(ggplot2)
library(ggprism)
# loading data set
data <- read.csv("./data/black_grad_rates.csv")
library(ggplot2)
library(ggprism)
# loading data set
data <- read.csv("./data/black_grad_rates.csv")
# loading data set
data <- read.csv("./data/black_grad_rates.csv")
# loading data set
setwd(C:/Desktop/SGH/PRZEDMIOTY/VI semestr/Visualization And Reporting of Statistical Analysis/project2)
# loading data set
setwd(C:/Desktop/SGH/PRZEDMIOTY/VI semestr/Visualization And Reporting of Statistical Analysis/project2)
# loading data set
setwd("C:/Desktop/SGH/PRZEDMIOTY/VI semestr/Visualization And Reporting of Statistical Analysis/project2")
data <- read.csv("./data/black_grad_rates.csv")
data <- read.csv("./data/black_grad_rates.csv")
data <- read.csv(".//data//black_grad_rates.csv")
data <- read.csv("/data/black_grad_rates.csv")
data <- read.csv("data/black_grad_rates.csv")
# loading data set
setwd("C:/Users/48570/Desktop/SGH/PRZEDMIOTY/VI semestr/Visualization And Reporting of Statistical Analysis/project2")
# loading data set
setwd("C:\Users\48570\Desktop\SGH\PRZEDMIOTY\VI semestr\Visualization And Reporting of Statistical Analysis\project2")
getwd()
setwd("C:\\Users\\48570\\Desktop\\SGH\\Magisterka\\PiWD\\zadanie_1\\)
getwd()
setwd("C:\\Users\\48570\\Desktop\\SGH\\Magisterka\\PiWD\\zadanie_1)
setwd("C:\\Users\\48570\\Desktop\\SGH\\Magisterka\\PiWD\\zadanie_1\\)
getwd()
setwd("C:\\Users\\48570\\Desktop\\SGH\\Magisterka\\PiWD\\zadanie_1\\")
setwd("C:\\Users\\48570\\Desktop\\SGH\\Magisterka\\PiWD\\zadanie_1")
getwd()
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
source("zadanie_1.r")
rm(list=ls())
### Libraries
library(magick)
# To be deleted later
setwd("C:\\Users\\48570\\Desktop\\SGH\\Magisterka\\Podstawy Programowania w R\\Projekt 1 - Labirynt")
### Read the image
d0 <- image_read(path = "./wallpaper.png")
### Get only the relevant part
dims <- rev(dim(as.raster(d0)))
d1 <- image_crop(image = d0, geometry = "800x800+560+140")
### Quantizing
d2 <- as.raster(image_quantize(image_normalize(d1), max = 2))
### Changing to TRUE / FALSE matrix
d3 <- array(
ifelse(as.vector(d2) == unique(as.vector(d2))[1], TRUE, FALSE),
dim(d2)
)
### Saving
saveRDS(object = d3, file = "./maze.RDS")
### Reading in the maze
d0 <- readRDS(file = "./maze.RDS")
### Plotting
plot(as.raster(d0))
View(d0)
View(d3)
### End region
logoPosition <- list(x = 387:413, y = 322:348)
### Starting point
startPoint <- list(x = 1, y = 1)
View(logoPosition)
View(d0)
?readRDS
View(d0)
?as.raster
plot(d0)
### Plotting
plot(as.raster(d0),
col = c("red","blue"))
flood_algorithm(d0, startPoint, logoPosition)
rows <- nrow(map_matrix)
flood_algorithm(map_matrix = d0, start_point = startPoint, end_region = logoPosition)
flood_algorithm <- function(map_matrix, start_point, end_region) {
rows <- nrow(map_matrix)
cols <- ncol(map_matrix)
# Function to check if a given cell is valid and not yet visited
is_valid <- function(row, col) {
row >= 1 && row <= rows && col >= 1 && col <= cols && map_matrix[row, col] != end_region
}
# Initialize the queue with the start point
queue <- list(start_point)
# Mark the start point as visited
map_matrix[start_point[1], start_point[2]] <- end_region
while (length(queue) > 0) {
# Dequeue the front of the queue
current_point <- queue[[1]]
queue <- queue[-1]
# Get the neighbors of the current point
neighbors <- rbind(
c(current_point[1] - 1, current_point[2]),
c(current_point[1] + 1, current_point[2]),
c(current_point[1], current_point[2] - 1),
c(current_point[1], current_point[2] + 1)
)
# Enqueue valid neighbors and mark them as visited
for (neighbor in neighbors) {
row <- neighbor[1]
col <- neighbor[2]
if (is_valid(row, col)) {
queue <- c(queue, list(neighbor))
map_matrix[row, col] <- end_region
}
}
}
return(map_matrix)
}
flood_algorithm(map_matrix = d0, start_point = startPoint, end_region = logoPosition)
View(d0)
len(d0)
length(d0)
View(startPoint)
startPoint in logoPosition
if startPoint in logoPosition
startPoint %in% logoPosition
d0
d0[1][1]
d0[1:3][1]
d0[1:3][1:3]
d0[1][1:3]
d0[1:][1:3]
d0[1][1]
View(d0)
d0[1][2]
d0[1]
d0[1:]
d0[1:2]
d0[1:3]
d0[1:]
d0[1:20]
d0[1,0]
d0[1,]
d0[1,][0,1]
d0[1,][,1]
d0[1,][1,]
d0[1,][1:3]
d0[1:2,][1:3]
d0[1:3,1:3]
scan <- startPoint
d0[scan-1$x:scan+1$x]
scan[1]
scan[-1]
scan
scan$x
d0scan$x
d0[scan$x]
d0[scan$x+1]
d0[scan$x-1]
d0[scan$x+2]
# Scan adjacent matrix fields
box = matrix(d0[scan$x-1:scan$x+1, scan$y-1:scan$y+1])
View(box)
# Scan adjacent matrix fields
box = matrix(d0[scan$x-1:scan$x+1, scan$y-1:scan$y+1], nrow = 3, ncol = 3)
scan = box
View(scan)
scan <- startPoint
scan[x]
scan$x
